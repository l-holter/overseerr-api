components:
  schemas:
    Cast:
      properties:
        castId:
          example: 1
          type: number
        character:
          example: Some Character Name
          type: string
        creditId:
          type: string
        gender:
          type: number
        id:
          example: 123
          type: number
        name:
          example: Some Persons Name
          type: string
        order:
          type: number
        profilePath:
          nullable: true
          type: string
      type: object
    Collection:
      properties:
        backdropPath:
          type: string
        id:
          example: 123
          type: number
        name:
          example: A Movie Collection
          type: string
        overview:
          example: Overview of collection
          type: string
        parts:
          items:
            $ref: '#/components/schemas/MovieResult'
          type: array
        posterPath:
          type: string
      type: object
    Company:
      properties:
        id:
          example: 1
          type: number
        logo_path:
          nullable: true
          type: string
        name:
          type: string
      type: object
    CreditCast:
      properties:
        adult:
          type: boolean
        backdropPath:
          type: string
        character:
          type: string
        creditId:
          type: string
        episodeCount:
          type: number
        firstAirDate:
          type: string
        genreIds:
          items:
            type: number
          type: array
        id:
          example: 1
          type: number
        mediaInfo:
          $ref: '#/components/schemas/MediaInfo'
        mediaType:
          type: string
        name:
          type: string
        originCountry:
          items:
            type: string
          type: array
        originalLanguage:
          type: string
        originalName:
          type: string
        originalTitle:
          type: string
        overview:
          type: string
        popularity:
          type: number
        posterPath:
          type: string
        releaseDate:
          type: string
        title:
          type: string
        video:
          type: boolean
        voteAverage:
          type: number
        voteCount:
          type: number
      type: object
    CreditCrew:
      properties:
        adult:
          type: boolean
        backdropPath:
          type: string
        creditId:
          type: string
        department:
          type: string
        episodeCount:
          type: number
        firstAirDate:
          type: string
        genreIds:
          items:
            type: number
          type: array
        id:
          example: 1
          type: number
        job:
          type: string
        mediaInfo:
          $ref: '#/components/schemas/MediaInfo'
        mediaType:
          type: string
        name:
          type: string
        originCountry:
          items:
            type: string
          type: array
        originalLanguage:
          type: string
        originalName:
          type: string
        originalTitle:
          type: string
        overview:
          type: string
        popularity:
          type: number
        posterPath:
          type: string
        releaseDate:
          type: string
        title:
          type: string
        video:
          type: boolean
        voteAverage:
          type: number
        voteCount:
          type: number
      type: object
    Crew:
      properties:
        creditId:
          type: string
        department:
          type: string
        gender:
          type: number
        id:
          example: 123
          type: number
        job:
          type: string
        name:
          example: Some Persons Name
          type: string
        profilePath:
          nullable: true
          type: string
      type: object
    DiscordSettings:
      properties:
        enabled:
          example: false
          type: boolean
        options:
          properties:
            botAvatarUrl:
              type: string
            botUsername:
              type: string
            enableMentions:
              type: boolean
            webhookUrl:
              type: string
          type: object
        types:
          example: 2
          type: number
      type: object
    DiscoverSlider:
      properties:
        data:
          example: '1234'
          nullable: true
          type: string
        enabled:
          type: boolean
        id:
          example: 1
          type: number
        isBuiltIn:
          type: boolean
        title:
          nullable: true
          type: string
        type:
          example: 1
          type: number
      required:
      - type
      - enabled
      - title
      - data
      type: object
    Episode:
      properties:
        airDate:
          nullable: true
          type: string
        episodeNumber:
          type: number
        id:
          type: number
        name:
          type: string
        overview:
          type: string
        productionCode:
          type: string
        seasonNumber:
          type: number
        showId:
          type: number
        stillPath:
          nullable: true
          type: string
        voteAverage:
          type: number
        voteCount:
          type: number
      type: object
    ExternalIds:
      properties:
        facebookId:
          nullable: true
          type: string
        freebaseId:
          nullable: true
          type: string
        freebaseMid:
          nullable: true
          type: string
        imdbId:
          nullable: true
          type: string
        instagramId:
          nullable: true
          type: string
        tvdbId:
          nullable: true
          type: number
        tvrageId:
          nullable: true
          type: number
        twitterId:
          nullable: true
          type: string
      type: object
    Genre:
      properties:
        id:
          example: 1
          type: number
        name:
          example: Adventure
          type: string
      type: object
    GotifySettings:
      properties:
        enabled:
          example: false
          type: boolean
        options:
          properties:
            token:
              type: string
            url:
              type: string
          type: object
        types:
          example: 2
          type: number
      type: object
    Issue:
      properties:
        comments:
          items:
            $ref: '#/components/schemas/IssueComment'
          type: array
        createdBy:
          $ref: '#/components/schemas/User'
        id:
          example: 1
          type: number
        issueType:
          example: 1
          type: number
        media:
          $ref: '#/components/schemas/MediaInfo'
        modifiedBy:
          $ref: '#/components/schemas/User'
      type: object
    IssueComment:
      properties:
        id:
          example: 1
          type: number
        message:
          example: A comment
          type: string
        user:
          $ref: '#/components/schemas/User'
      type: object
    Job:
      properties:
        id:
          example: job-name
          type: string
        interval:
          enum:
          - short
          - long
          - fixed
          type: string
        name:
          example: A Job Name
          type: string
        nextExecutionTime:
          example: '2020-09-02T05:02:23.000Z'
          type: string
        running:
          example: false
          type: boolean
        type:
          enum:
          - process
          - command
          type: string
      type: object
    Keyword:
      properties:
        id:
          example: 1
          type: number
        name:
          example: anime
          type: string
      type: object
    LunaSeaSettings:
      properties:
        enabled:
          example: false
          type: boolean
        options:
          properties:
            profileName:
              type: string
            webhookUrl:
              type: string
          type: object
        types:
          example: 2
          type: number
      type: object
    MainSettings:
      properties:
        apiKey:
          readOnly: true
          type: string
        appLanguage:
          example: en
          type: string
        applicationTitle:
          example: Overseerr
          type: string
        applicationUrl:
          example: https://os.example.com
          type: string
        csrfProtection:
          example: false
          type: boolean
        defaultPermissions:
          example: 32
          type: number
        hideAvailable:
          example: false
          type: boolean
        localLogin:
          example: true
          type: boolean
        newPlexLogin:
          example: true
          type: boolean
        partialRequestsEnabled:
          example: false
          type: boolean
        trustProxy:
          example: true
          type: boolean
      type: object
    MediaInfo:
      properties:
        createdAt:
          example: '2020-09-12T10:00:27.000Z'
          readOnly: true
          type: string
        id:
          readOnly: true
          type: number
        requests:
          items:
            $ref: '#/components/schemas/MediaRequest'
          readOnly: true
          type: array
        status:
          description: Availability of the media. 1 = `UNKNOWN`, 2 = `PENDING`, 3
            = `PROCESSING`, 4 = `PARTIALLY_AVAILABLE`, 5 = `AVAILABLE`
          example: 0
          type: number
        tmdbId:
          readOnly: true
          type: number
        tvdbId:
          nullable: true
          readOnly: true
          type: number
        updatedAt:
          example: '2020-09-12T10:00:27.000Z'
          readOnly: true
          type: string
      type: object
    MediaRequest:
      properties:
        createdAt:
          example: '2020-09-12T10:00:27.000Z'
          readOnly: true
          type: string
        id:
          example: 123
          readOnly: true
          type: number
        is4k:
          example: false
          type: boolean
        media:
          $ref: '#/components/schemas/MediaInfo'
        modifiedBy:
          anyOf:
          - $ref: '#/components/schemas/User'
          - nullable: true
            type: string
        profileId:
          type: number
        requestedBy:
          $ref: '#/components/schemas/User'
        rootFolder:
          type: string
        serverId:
          type: number
        status:
          description: Status of the request. 1 = PENDING APPROVAL, 2 = APPROVED,
            3 = DECLINED
          example: 0
          readOnly: true
          type: number
        updatedAt:
          example: '2020-09-12T10:00:27.000Z'
          readOnly: true
          type: string
      required:
      - id
      - status
      type: object
    MovieDetails:
      properties:
        adult:
          type: boolean
        backdropPath:
          type: string
        budget:
          example: 1000000
          type: number
        collection:
          properties:
            backdropPath:
              type: string
            id:
              example: 1
              type: number
            name:
              example: A collection
              type: string
            posterPath:
              type: string
          type: object
        credits:
          properties:
            cast:
              items:
                $ref: '#/components/schemas/Cast'
              type: array
            crew:
              items:
                $ref: '#/components/schemas/Crew'
              type: array
          type: object
        externalIds:
          $ref: '#/components/schemas/ExternalIds'
        genres:
          items:
            $ref: '#/components/schemas/Genre'
          type: array
        homepage:
          type: string
        id:
          example: 123
          readOnly: true
          type: number
        imdbId:
          example: tt123
          type: string
        mediaInfo:
          $ref: '#/components/schemas/MediaInfo'
        originalLanguage:
          type: string
        originalTitle:
          type: string
        overview:
          type: string
        popularity:
          type: number
        posterPath:
          type: string
        productionCompanies:
          items:
            $ref: '#/components/schemas/ProductionCompany'
          type: array
        productionCountries:
          items:
            properties:
              iso_3166_1:
                type: string
              name:
                type: string
            type: object
          type: array
        relatedVideos:
          items:
            $ref: '#/components/schemas/RelatedVideo'
          type: array
        releaseDate:
          type: string
        releases:
          properties:
            results:
              items:
                properties:
                  iso_3166_1:
                    example: US
                    type: string
                  rating:
                    nullable: true
                    type: string
                  release_dates:
                    items:
                      properties:
                        certification:
                          example: PG-13
                          type: string
                        iso_639_1:
                          nullable: true
                          type: string
                        note:
                          example: Blu ray
                          nullable: true
                          type: string
                        release_date:
                          example: '2017-07-12T00:00:00.000Z'
                          type: string
                        type:
                          example: 1
                          type: number
                      type: object
                    type: array
                type: object
              type: array
          type: object
        revenue:
          nullable: true
          type: number
        runtime:
          type: number
        spokenLanguages:
          items:
            $ref: '#/components/schemas/SpokenLanguage'
          type: array
        status:
          type: string
        tagline:
          type: string
        title:
          type: string
        video:
          type: boolean
        voteAverage:
          type: number
        voteCount:
          type: number
        watchProviders:
          items:
            $ref: '#/components/schemas/WatchProviders'
          type: array
      type: object
    MovieResult:
      properties:
        adult:
          example: false
          type: boolean
        backdropPath:
          type: string
        genreIds:
          items:
            type: number
          type: array
        id:
          example: 1234
          type: number
        mediaInfo:
          $ref: '#/components/schemas/MediaInfo'
        mediaType:
          type: string
        originalLanguage:
          example: en
          type: string
        originalTitle:
          example: Original Movie Title
          type: string
        overview:
          example: Overview of the movie
          type: string
        popularity:
          example: 10
          type: number
        posterPath:
          type: string
        releaseDate:
          type: string
        title:
          example: Movie Title
          type: string
        video:
          example: false
          type: boolean
        voteAverage:
          type: number
        voteCount:
          type: number
      required:
      - id
      - mediaType
      - title
      type: object
    Network:
      properties:
        id:
          example: 1
          type: number
        logoPath:
          nullable: true
          type: string
        name:
          type: string
        originCountry:
          type: string
      type: object
    NotificationAgentTypes:
      properties:
        discord:
          type: number
        email:
          type: number
        pushbullet:
          type: number
        pushover:
          type: number
        slack:
          type: number
        telegram:
          type: number
        webhook:
          type: number
        webpush:
          type: number
      type: object
    NotificationEmailSettings:
      properties:
        enabled:
          example: false
          type: boolean
        options:
          properties:
            allowSelfSigned:
              example: false
              type: boolean
            authPass:
              nullable: true
              type: string
            authUser:
              nullable: true
              type: string
            emailFrom:
              example: no-reply@example.com
              type: string
            ignoreTls:
              example: false
              type: boolean
            requireTls:
              example: false
              type: boolean
            secure:
              example: false
              type: boolean
            senderName:
              example: Overseerr
              type: string
            smtpHost:
              example: 127.0.0.1
              type: string
            smtpPort:
              example: 465
              type: number
          type: object
        types:
          example: 2
          type: number
      type: object
    PageInfo:
      properties:
        page:
          example: 1
          type: number
        pages:
          example: 10
          type: number
        results:
          example: 100
          type: number
      type: object
    PersonDetails:
      properties:
        adult:
          type: boolean
        alsoKnownAs:
          items:
            type: string
          type: array
        biography:
          type: string
        deathday:
          type: string
        gender:
          type: string
        homepage:
          type: string
        id:
          example: 1
          type: number
        imdbId:
          type: string
        knownForDepartment:
          type: string
        name:
          type: string
        placeOfBirth:
          type: string
        popularity:
          type: string
        profilePath:
          type: string
      type: object
    PersonResult:
      properties:
        adult:
          example: false
          type: boolean
        id:
          example: 12345
          type: number
        knownFor:
          items:
            oneOf:
            - $ref: '#/components/schemas/MovieResult'
            - $ref: '#/components/schemas/TvResult'
          type: array
        mediaType:
          default: person
          type: string
        profilePath:
          type: string
      type: object
    PlexConnection:
      properties:
        address:
          example: 127.0.0.1
          type: string
        local:
          example: true
          type: boolean
        message:
          example: OK
          type: string
        port:
          example: 32400
          type: number
        protocol:
          example: https
          type: string
        status:
          example: 200
          type: number
        uri:
          example: https://127-0-0-1.2ab6ce1a093d465e910def96cf4e4799.plex.direct:32400
          type: string
      required:
      - protocol
      - address
      - port
      - uri
      - local
      type: object
    PlexDevice:
      properties:
        accessToken:
          example: supersecretaccesstoken
          type: string
        clientIdentifier:
          example: 85a943ce-a0cc-4d2a-a4ec-f74f06e40feb
          type: string
        connection:
          items:
            $ref: '#/components/schemas/PlexConnection'
          type: array
        createdAt:
          example: '2021-01-01T00:00:00.000Z'
          type: string
        device:
          example: PC
          type: string
        dnsRebindingProtection:
          example: false
          type: boolean
        home:
          example: true
          type: boolean
        httpsRequired:
          example: true
          type: boolean
        lastSeenAt:
          example: '2021-01-01T00:00:00.000Z'
          type: string
        name:
          example: My Plex Server
          type: string
        natLoopbackSupported:
          example: false
          type: boolean
        owned:
          example: true
          type: boolean
        ownerID:
          example: '12345'
          type: string
        platform:
          example: Linux
          type: string
        platformVersion:
          example: default/linux/amd64/17.1/systemd
          type: string
        presence:
          example: true
          type: boolean
        product:
          example: Plex Media Server
          type: string
        productVersion:
          example: '1.21'
          type: string
        provides:
          items:
            example: server
            type: string
          type: array
        publicAddress:
          example: 127.0.0.1
          type: string
        publicAddressMatches:
          example: false
          type: boolean
        relay:
          example: true
          type: boolean
        sourceTitle:
          example: xyzabc
          type: string
        synced:
          example: true
          type: boolean
      required:
      - name
      - product
      - productVersion
      - platform
      - device
      - clientIdentifier
      - createdAt
      - lastSeenAt
      - provides
      - owned
      - connection
      type: object
    PlexLibrary:
      properties:
        enabled:
          example: false
          type: boolean
        id:
          type: string
        name:
          example: Movies
          type: string
      required:
      - id
      - name
      - enabled
      type: object
    PlexSettings:
      properties:
        ip:
          example: 127.0.0.1
          type: string
        libraries:
          items:
            $ref: '#/components/schemas/PlexLibrary'
          readOnly: true
          type: array
        machineId:
          example: '1234123412341234'
          readOnly: true
          type: string
        name:
          example: Main Server
          readOnly: true
          type: string
        port:
          example: 32400
          type: number
        useSsl:
          nullable: true
          type: boolean
        webAppUrl:
          example: https://app.plex.tv/desktop
          nullable: true
          type: string
      required:
      - name
      - machineId
      - ip
      - port
      type: object
    ProductionCompany:
      properties:
        id:
          example: 1
          type: number
        logoPath:
          nullable: true
          type: string
        name:
          type: string
        originCountry:
          type: string
      type: object
    PublicSettings:
      properties:
        initialized:
          example: false
          type: boolean
      type: object
    PushbulletSettings:
      properties:
        enabled:
          example: false
          type: boolean
        options:
          properties:
            accessToken:
              type: string
            channelTag:
              nullable: true
              type: string
          type: object
        types:
          example: 2
          type: number
      type: object
    PushoverSettings:
      properties:
        enabled:
          example: false
          type: boolean
        options:
          properties:
            accessToken:
              type: string
            sound:
              type: string
            userToken:
              type: string
          type: object
        types:
          example: 2
          type: number
      type: object
    RadarrSettings:
      properties:
        activeDirectory:
          example: /movies
          type: string
        activeProfileId:
          example: 1
          type: number
        activeProfileName:
          example: 720p/1080p
          type: string
        apiKey:
          example: exampleapikey
          type: string
        baseUrl:
          type: string
        externalUrl:
          example: http://radarr.example.com
          type: string
        hostname:
          example: 127.0.0.1
          type: string
        id:
          example: 0
          readOnly: true
          type: number
        is4k:
          example: false
          type: boolean
        isDefault:
          example: false
          type: boolean
        minimumAvailability:
          example: In Cinema
          type: string
        name:
          example: Radarr Main
          type: string
        port:
          example: 7878
          type: number
        preventSearch:
          example: false
          type: boolean
        syncEnabled:
          example: false
          type: boolean
        useSsl:
          example: false
          type: boolean
      required:
      - name
      - hostname
      - port
      - apiKey
      - useSsl
      - activeProfileId
      - activeProfileName
      - activeDirectory
      - is4k
      - minimumAvailability
      - isDefault
      type: object
    RelatedVideo:
      properties:
        key:
          example: 9qhL2_UxXM0
          type: string
        name:
          example: Trailer for some movie (1978)
          type: string
        site:
          enum:
          - YouTube
          type: string
        size:
          example: 1080
          type: number
        type:
          enum:
          - Clip
          - Teaser
          - Trailer
          - Featurette
          - Opening Credits
          - Behind the Scenes
          - Bloopers
          example: Trailer
          type: string
        url:
          example: https://www.youtube.com/watch?v=9qhL2_UxXM0/
          type: string
      type: object
    Season:
      properties:
        airDate:
          nullable: true
          type: string
        episodeCount:
          type: number
        episodes:
          items:
            $ref: '#/components/schemas/Episode'
          type: array
        id:
          type: number
        name:
          type: string
        overview:
          type: string
        posterPath:
          type: string
        seasonNumber:
          type: number
      type: object
    ServarrTag:
      properties:
        id:
          example: 1
          type: number
        label:
          example: A Label
          type: string
      type: object
    ServiceProfile:
      properties:
        id:
          example: 1
          type: number
        name:
          example: 720p/1080p
          type: string
      type: object
    SlackSettings:
      properties:
        enabled:
          example: false
          type: boolean
        options:
          properties:
            webhookUrl:
              type: string
          type: object
        types:
          example: 2
          type: number
      type: object
    SonarrSeries:
      properties:
        addOptions:
          items:
            properties:
              ignoreEpisodesWithFiles:
                nullable: true
                type: boolean
              ignoreEpisodesWithoutFiles:
                nullable: true
                type: boolean
              searchForMissingEpisodes:
                nullable: true
                type: boolean
            type: object
          type: array
        added:
          type: string
        airTime:
          example: 02:15
          type: string
        certification:
          type: string
        cleanTitle:
          type: string
        firstAired:
          type: string
        genres:
          items:
            type: string
          type: array
        id:
          nullable: true
          type: number
        images:
          items:
            properties:
              coverType:
                example: banner
                type: string
              url:
                example: /sonarr/MediaCoverProxy/6467f05d9872726ad08cbf920e5fee4bf69198682260acab8eab5d3c2c958e92/5c8f116c6aa5c.jpg
                type: string
            type: object
          type: array
        imdbId:
          type: string
        languageProfileId:
          type: number
        lastInfoSync:
          nullable: true
          type: string
        monitored:
          type: boolean
        network:
          example: CBS
          type: string
        overview:
          example: The thread is picked up again by Marianne Schmidt which ...
          type: string
        path:
          type: string
        profileId:
          type: number
        qualityProfileId:
          type: number
        ratings:
          items:
            properties:
              value:
                type: number
              votes:
                type: number
            type: object
          type: array
        remotePoster:
          example: https://artworks.thetvdb.com/banners/posters/5c8f116129983.jpg
          type: string
        rootFolderPath:
          nullable: true
          type: string
        runtime:
          type: number
        seasonCount:
          example: 1
          type: number
        seasonFolder:
          type: boolean
        seasons:
          items:
            properties:
              monitored:
                example: true
                type: boolean
              seasonNumber:
                example: 1
                type: number
            type: object
          type: array
        seriesType:
          type: string
        sortTitle:
          example: covid 25
          type: string
        status:
          example: upcoming
          type: string
        tags:
          items:
            type: string
          type: array
        title:
          example: COVID-25
          type: string
        titleSlug:
          type: string
        tvMazeId:
          type: number
        tvRageId:
          type: number
        tvdbId:
          example: 12345
          type: number
        useSceneNumbering:
          type: boolean
        year:
          example: 2015
          type: number
      type: object
    SonarrSettings:
      properties:
        activeAnimeDirectory:
          nullable: true
          type: string
        activeAnimeLanguageProfileId:
          nullable: true
          type: number
        activeAnimeProfileId:
          nullable: true
          type: number
        activeAnimeProfileName:
          example: 720p/1080p
          nullable: true
          type: string
        activeDirectory:
          example: /tv/
          type: string
        activeLanguageProfileId:
          example: 1
          type: number
        activeProfileId:
          example: 1
          type: number
        activeProfileName:
          example: 720p/1080p
          type: string
        apiKey:
          example: exampleapikey
          type: string
        baseUrl:
          type: string
        enableSeasonFolders:
          example: false
          type: boolean
        externalUrl:
          example: http://radarr.example.com
          type: string
        hostname:
          example: 127.0.0.1
          type: string
        id:
          example: 0
          readOnly: true
          type: number
        is4k:
          example: false
          type: boolean
        isDefault:
          example: false
          type: boolean
        name:
          example: Sonarr Main
          type: string
        port:
          example: 8989
          type: number
        preventSearch:
          example: false
          type: boolean
        syncEnabled:
          example: false
          type: boolean
        useSsl:
          example: false
          type: boolean
      required:
      - name
      - hostname
      - port
      - apiKey
      - useSsl
      - activeProfileId
      - activeProfileName
      - activeDirectory
      - is4k
      - enableSeasonFolders
      - isDefault
      type: object
    SpokenLanguage:
      properties:
        englishName:
          example: English
          nullable: true
          type: string
        iso_639_1:
          example: en
          type: string
        name:
          example: English
          type: string
      type: object
    TautulliSettings:
      properties:
        apiKey:
          nullable: true
          type: string
        externalUrl:
          nullable: true
          type: string
        hostname:
          example: tautulli.example.com
          nullable: true
          type: string
        port:
          example: 8181
          nullable: true
          type: number
        useSsl:
          nullable: true
          type: boolean
      type: object
    TelegramSettings:
      properties:
        enabled:
          example: false
          type: boolean
        options:
          properties:
            botAPI:
              type: string
            botUsername:
              type: string
            chatId:
              type: string
            sendSilently:
              type: boolean
          type: object
        types:
          example: 2
          type: number
      type: object
    TvDetails:
      properties:
        backdropPath:
          type: string
        contentRatings:
          properties:
            results:
              items:
                properties:
                  iso_3166_1:
                    example: US
                    type: string
                  rating:
                    example: TV-14
                    type: string
                type: object
              type: array
          type: object
        createdBy:
          items:
            properties:
              gender:
                type: number
              id:
                type: number
              name:
                type: string
              profilePath:
                nullable: true
                type: string
            type: object
          type: array
        credits:
          properties:
            cast:
              items:
                $ref: '#/components/schemas/Cast'
              type: array
            crew:
              items:
                $ref: '#/components/schemas/Crew'
              type: array
          type: object
        episodeRunTime:
          items:
            type: number
          type: array
        externalIds:
          $ref: '#/components/schemas/ExternalIds'
        firstAirDate:
          type: string
        genres:
          items:
            $ref: '#/components/schemas/Genre'
          type: array
        homepage:
          type: string
        id:
          example: 123
          type: number
        inProduction:
          type: boolean
        keywords:
          items:
            $ref: '#/components/schemas/Keyword'
          type: array
        languages:
          items:
            type: string
          type: array
        lastAirDate:
          type: string
        lastEpisodeToAir:
          $ref: '#/components/schemas/Episode'
        mediaInfo:
          $ref: '#/components/schemas/MediaInfo'
        name:
          type: string
        networks:
          items:
            $ref: '#/components/schemas/ProductionCompany'
          type: array
        nextEpisodeToAir:
          $ref: '#/components/schemas/Episode'
        numberOfEpisodes:
          type: number
        numberOfSeason:
          type: number
        originCountry:
          items:
            type: string
          type: array
        originalLanguage:
          type: string
        originalName:
          type: string
        overview:
          type: string
        popularity:
          type: number
        posterPath:
          type: string
        productionCompanies:
          items:
            $ref: '#/components/schemas/ProductionCompany'
          type: array
        productionCountries:
          items:
            properties:
              iso_3166_1:
                type: string
              name:
                type: string
            type: object
          type: array
        seasons:
          items:
            $ref: '#/components/schemas/Season'
          type: array
        spokenLanguages:
          items:
            $ref: '#/components/schemas/SpokenLanguage'
          type: array
        status:
          type: string
        tagline:
          type: string
        type:
          type: string
        voteAverage:
          type: number
        voteCount:
          type: number
        watchProviders:
          items:
            $ref: '#/components/schemas/WatchProviders'
          type: array
      type: object
    TvResult:
      properties:
        backdropPath:
          type: string
        firstAirDate:
          type: string
        genreIds:
          items:
            type: number
          type: array
        id:
          example: 1234
          type: number
        mediaInfo:
          $ref: '#/components/schemas/MediaInfo'
        mediaType:
          type: string
        name:
          example: TV Show Name
          type: string
        originCountry:
          items:
            type: string
          type: array
        originalLanguage:
          example: en
          type: string
        originalName:
          example: Original TV Show Name
          type: string
        overview:
          example: Overview of the movie
          type: string
        popularity:
          example: 10
          type: number
        posterPath:
          type: string
        voteAverage:
          type: number
        voteCount:
          type: number
      type: object
    User:
      properties:
        avatar:
          readOnly: true
          type: string
        createdAt:
          example: '2020-09-02T05:02:23.000Z'
          readOnly: true
          type: string
        email:
          example: hey@itsme.com
          readOnly: true
          type: string
        id:
          example: 1
          readOnly: true
          type: integer
        permissions:
          example: 0
          type: number
        plexToken:
          readOnly: true
          type: string
        plexUsername:
          readOnly: true
          type: string
        requestCount:
          example: 5
          readOnly: true
          type: number
        updatedAt:
          example: '2020-09-02T05:02:23.000Z'
          readOnly: true
          type: string
        userType:
          example: 1
          readOnly: true
          type: integer
        username:
          type: string
      required:
      - id
      - email
      - createdAt
      - updatedAt
      type: object
    UserSettings:
      properties:
        locale:
          type: string
        originalLanguage:
          type: string
        region:
          type: string
      type: object
    UserSettingsNotifications:
      properties:
        discordEnabled:
          type: boolean
        discordEnabledTypes:
          nullable: true
          type: number
        discordId:
          nullable: true
          type: string
        emailEnabled:
          type: boolean
        notificationTypes:
          $ref: '#/components/schemas/NotificationAgentTypes'
        pgpKey:
          nullable: true
          type: string
        pushbulletAccessToken:
          nullable: true
          type: string
        pushoverApplicationToken:
          nullable: true
          type: string
        pushoverSound:
          nullable: true
          type: string
        pushoverUserKey:
          nullable: true
          type: string
        telegramBotUsername:
          nullable: true
          type: string
        telegramChatId:
          nullable: true
          type: string
        telegramEnabled:
          type: boolean
        telegramSendSilently:
          nullable: true
          type: boolean
      type: object
    WatchProviderDetails:
      properties:
        displayPriority:
          type: number
        id:
          type: number
        logoPath:
          type: string
        name:
          type: string
      type: object
    WatchProviderRegion:
      properties:
        english_name:
          type: string
        iso_3166_1:
          type: string
        native_name:
          type: string
      type: object
    WatchProviders:
      items:
        properties:
          buy:
            items:
              $ref: '#/components/schemas/WatchProviderDetails'
            type: array
          flatrate:
            items:
              $ref: '#/components/schemas/WatchProviderDetails'
          iso_3166_1:
            type: string
          link:
            type: string
        type: object
      type: array
    WebPushSettings:
      properties:
        enabled:
          example: false
          type: boolean
        types:
          example: 2
          type: number
      type: object
    WebhookSettings:
      properties:
        enabled:
          example: false
          type: boolean
        options:
          properties:
            authHeader:
              type: string
            jsonPayload:
              type: string
            webhookUrl:
              type: string
          type: object
        types:
          example: 2
          type: number
      type: object
  securitySchemes:
    apiKey:
      in: header
      name: X-Api-Key
      type: apiKey
    cookieAuth:
      in: cookie
      name: connect.sid
      type: apiKey
info:
  description: 'This is the documentation for the Overseerr API backend.


    Two primary authentication methods are supported:


    - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local`
    will generate a valid authentication cookie.

    - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key`
    header along with a valid API Key generated by Overseerr.

    '
  title: Overseerr API
  version: 1.0.0
openapi: 3.0.2
paths:
  /auth/local:
    post:
      description: Takes an `email` and a `password` to log the user in. Generates
        a session cookie for use in further requests.
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
              - email
              - password
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: OK
      security: []
      summary: Sign in using a local account
      tags:
      - auth
  /auth/logout:
    post:
      description: Completely clear the session cookie and associated values, effectively
        signing the user out.
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  status:
                    example: ok
                    type: string
                type: object
          description: OK
      summary: Sign out and clear session cookie
      tags:
      - auth
  /auth/me:
    get:
      description: Returns the currently logged-in user.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Object containing the logged-in user in JSON
      summary: Get logged-in user
      tags:
      - auth
      - users
  /auth/plex:
    post:
      description: Takes an `authToken` (Plex token) to log the user in. Generates
        a session cookie for use in further requests. If the user does not exist,
        and there are no other users, then a user will be created with full admin
        privileges. If a user logs in with access to the main Plex server, they will
        also have an account created, but without any permissions.
      requestBody:
        content:
          application/json:
            schema:
              properties:
                authToken:
                  type: string
              required:
              - authToken
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: OK
      security: []
      summary: Sign in using a Plex token
      tags:
      - auth
  /auth/reset-password:
    post:
      description: Sends a reset password email to the email if the user exists
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
              required:
              - email
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  status:
                    example: ok
                    type: string
                type: object
          description: OK
      security: []
      summary: Send a reset password email
      tags:
      - users
  /auth/reset-password/{guid}:
    post:
      description: Resets the password for a user if the given guid is connected to
        a user
      parameters:
      - in: path
        name: guid
        required: true
        schema:
          example: 9afef5a7-ec89-4d5f-9397-261e96970b50
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                password:
                  type: string
              required:
              - password
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  status:
                    example: ok
                    type: string
                type: object
          description: OK
      security: []
      summary: Reset the password for a user
      tags:
      - users
  /backdrops:
    get:
      description: Returns a list of backdrop image paths in a JSON array.
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: Results
      security: []
      summary: Get backdrops of trending items
      tags:
      - tmdb
  /collection/{collectionId}:
    get:
      description: Returns full collection details in a JSON object.
      parameters:
      - in: path
        name: collectionId
        required: true
        schema:
          example: 537982
          type: number
      - in: query
        name: language
        schema:
          example: en
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
          description: Collection details
      summary: Get collection details
      tags:
      - collection
  /discover/genreslider/movie:
    get:
      description: Returns a list of genres with backdrops attached
      parameters:
      - in: query
        name: language
        schema:
          example: en
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  properties:
                    backdrops:
                      items:
                        type: string
                      type: array
                    id:
                      example: 1
                      type: number
                    name:
                      example: Genre Name
                      type: string
                  type: object
                type: array
          description: Genre slider data returned
      summary: Get genre slider data for movies
      tags:
      - search
  /discover/genreslider/tv:
    get:
      description: Returns a list of genres with backdrops attached
      parameters:
      - in: query
        name: language
        schema:
          example: en
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  properties:
                    backdrops:
                      items:
                        type: string
                      type: array
                    id:
                      example: 1
                      type: number
                    name:
                      example: Genre Name
                      type: string
                  type: object
                type: array
          description: Genre slider data returned
      summary: Get genre slider data for TV series
      tags:
      - search
  /discover/keyword/{keywordId}/movies:
    get:
      description: Returns list of movies based on the provided keyword ID a JSON
        object.
      parameters:
      - in: path
        name: keywordId
        required: true
        schema:
          example: 207317
          type: number
      - in: query
        name: page
        schema:
          default: 1
          example: 1
          type: number
      - in: query
        name: language
        schema:
          example: en
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  page:
                    example: 1
                    type: number
                  results:
                    items:
                      $ref: '#/components/schemas/MovieResult'
                    type: array
                  totalPages:
                    example: 20
                    type: number
                  totalResults:
                    example: 200
                    type: number
                type: object
          description: List of movies
      summary: Get movies from keyword
      tags:
      - search
  /discover/movies:
    get:
      description: Returns a list of movies in a JSON object.
      parameters:
      - in: query
        name: page
        schema:
          default: 1
          example: 1
          type: number
      - in: query
        name: language
        schema:
          example: en
          type: string
      - in: query
        name: genre
        schema:
          example: 18
          type: string
      - in: query
        name: studio
        schema:
          example: 1
          type: number
      - in: query
        name: keywords
        schema:
          example: 1,2
          type: string
      - in: query
        name: sortBy
        schema:
          example: popularity.desc
          type: string
      - in: query
        name: primaryReleaseDateGte
        schema:
          example: 2022-01-01
          type: string
      - in: query
        name: primaryReleaseDateLte
        schema:
          example: 2023-01-01
          type: string
      - in: query
        name: withRuntimeGte
        schema:
          example: 60
          type: number
      - in: query
        name: withRuntimeLte
        schema:
          example: 120
          type: number
      - in: query
        name: voteAverageGte
        schema:
          example: 7
          type: number
      - in: query
        name: voteAverageLte
        schema:
          example: 10
          type: number
      - in: query
        name: voteCountGte
        schema:
          example: 7
          type: number
      - in: query
        name: voteCountLte
        schema:
          example: 10
          type: number
      - in: query
        name: watchRegion
        schema:
          example: US
          type: string
      - in: query
        name: watchProviders
        schema:
          example: 8|9
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  page:
                    example: 1
                    type: number
                  results:
                    items:
                      $ref: '#/components/schemas/MovieResult'
                    type: array
                  totalPages:
                    example: 20
                    type: number
                  totalResults:
                    example: 200
                    type: number
                type: object
          description: Results
      summary: Discover movies
      tags:
      - search
  /discover/movies/genre/{genreId}:
    get:
      description: Returns a list of movies based on the provided genre ID in a JSON
        object.
      parameters:
      - in: path
        name: genreId
        required: true
        schema:
          example: '1'
          type: string
      - in: query
        name: page
        schema:
          default: 1
          example: 1
          type: number
      - in: query
        name: language
        schema:
          example: en
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  genre:
                    $ref: '#/components/schemas/Genre'
                  page:
                    example: 1
                    type: number
                  results:
                    items:
                      $ref: '#/components/schemas/MovieResult'
                    type: array
                  totalPages:
                    example: 20
                    type: number
                  totalResults:
                    example: 200
                    type: number
                type: object
          description: Results
      summary: Discover movies by genre
      tags:
      - search
  /discover/movies/language/{language}:
    get:
      description: Returns a list of movies based on the provided ISO 639-1 language
        code in a JSON object.
      parameters:
      - in: path
        name: language
        required: true
        schema:
          example: en
          type: string
      - in: query
        name: page
        schema:
          default: 1
          example: 1
          type: number
      - in: query
        name: language
        schema:
          example: en
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  language:
                    $ref: '#/components/schemas/SpokenLanguage'
                  page:
                    example: 1
                    type: number
                  results:
                    items:
                      $ref: '#/components/schemas/MovieResult'
                    type: array
                  totalPages:
                    example: 20
                    type: number
                  totalResults:
                    example: 200
                    type: number
                type: object
          description: Results
      summary: Discover movies by original language
      tags:
      - search
  /discover/movies/studio/{studioId}:
    get:
      description: Returns a list of movies based on the provided studio ID in a JSON
        object.
      parameters:
      - in: path
        name: studioId
        required: true
        schema:
          example: '1'
          type: string
      - in: query
        name: page
        schema:
          default: 1
          example: 1
          type: number
      - in: query
        name: language
        schema:
          example: en
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  page:
                    example: 1
                    type: number
                  results:
                    items:
                      $ref: '#/components/schemas/MovieResult'
                    type: array
                  studio:
                    $ref: '#/components/schemas/ProductionCompany'
                  totalPages:
                    example: 20
                    type: number
                  totalResults:
                    example: 200
                    type: number
                type: object
          description: Results
      summary: Discover movies by studio
      tags:
      - search
  /discover/movies/upcoming:
    get:
      description: Returns a list of movies in a JSON object.
      parameters:
      - in: query
        name: page
        schema:
          default: 1
          example: 1
          type: number
      - in: query
        name: language
        schema:
          example: en
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  page:
                    example: 1
                    type: number
                  results:
                    items:
                      $ref: '#/components/schemas/MovieResult'
                    type: array
                  totalPages:
                    example: 20
                    type: number
                  totalResults:
                    example: 200
                    type: number
                type: object
          description: Results
      summary: Upcoming movies
      tags:
      - search
  /discover/trending:
    get:
      description: Returns a list of movies and TV shows in a JSON object.
      parameters:
      - in: query
        name: page
        schema:
          default: 1
          example: 1
          type: number
      - in: query
        name: language
        schema:
          example: en
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  page:
                    example: 1
                    type: number
                  results:
                    items:
                      anyOf:
                      - $ref: '#/components/schemas/MovieResult'
                      - $ref: '#/components/schemas/TvResult'
                      - $ref: '#/components/schemas/PersonResult'
                    type: array
                  totalPages:
                    example: 20
                    type: number
                  totalResults:
                    example: 200
                    type: number
                type: object
          description: Results
      summary: Trending movies and TV
      tags:
      - search
  /discover/tv:
    get:
      description: Returns a list of TV shows in a JSON object.
      parameters:
      - in: query
        name: page
        schema:
          default: 1
          example: 1
          type: number
      - in: query
        name: language
        schema:
          example: en
          type: string
      - in: query
        name: genre
        schema:
          example: 18
          type: string
      - in: query
        name: network
        schema:
          example: 1
          type: number
      - in: query
        name: keywords
        schema:
          example: 1,2
          type: string
      - in: query
        name: sortBy
        schema:
          example: popularity.desc
          type: string
      - in: query
        name: firstAirDateGte
        schema:
          example: 2022-01-01
          type: string
      - in: query
        name: firstAirDateLte
        schema:
          example: 2023-01-01
          type: string
      - in: query
        name: withRuntimeGte
        schema:
          example: 60
          type: number
      - in: query
        name: withRuntimeLte
        schema:
          example: 120
          type: number
      - in: query
        name: voteAverageGte
        schema:
          example: 7
          type: number
      - in: query
        name: voteAverageLte
        schema:
          example: 10
          type: number
      - in: query
        name: voteCountGte
        schema:
          example: 7
          type: number
      - in: query
        name: voteCountLte
        schema:
          example: 10
          type: number
      - in: query
        name: watchRegion
        schema:
          example: US
          type: string
      - in: query
        name: watchProviders
        schema:
          example: 8|9
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  page:
                    example: 1
                    type: number
                  results:
                    items:
                      $ref: '#/components/schemas/TvResult'
                    type: array
                  totalPages:
                    example: 20
                    type: number
                  totalResults:
                    example: 200
                    type: number
                type: object
          description: Results
      summary: Discover TV shows
      tags:
      - search
  /discover/tv/genre/{genreId}:
    get:
      description: Returns a list of TV shows based on the provided genre ID in a
        JSON object.
      parameters:
      - in: path
        name: genreId
        required: true
        schema:
          example: '1'
          type: string
      - in: query
        name: page
        schema:
          default: 1
          example: 1
          type: number
      - in: query
        name: language
        schema:
          example: en
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  genre:
                    $ref: '#/components/schemas/Genre'
                  page:
                    example: 1
                    type: number
                  results:
                    items:
                      $ref: '#/components/schemas/TvResult'
                    type: array
                  totalPages:
                    example: 20
                    type: number
                  totalResults:
                    example: 200
                    type: number
                type: object
          description: Results
      summary: Discover TV shows by genre
      tags:
      - search
  /discover/tv/language/{language}:
    get:
      description: Returns a list of TV shows based on the provided ISO 639-1 language
        code in a JSON object.
      parameters:
      - in: path
        name: language
        required: true
        schema:
          example: en
          type: string
      - in: query
        name: page
        schema:
          default: 1
          example: 1
          type: number
      - in: query
        name: language
        schema:
          example: en
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  language:
                    $ref: '#/components/schemas/SpokenLanguage'
                  page:
                    example: 1
                    type: number
                  results:
                    items:
                      $ref: '#/components/schemas/TvResult'
                    type: array
                  totalPages:
                    example: 20
                    type: number
                  totalResults:
                    example: 200
                    type: number
                type: object
          description: Results
      summary: Discover TV shows by original language
      tags:
      - search
  /discover/tv/network/{networkId}:
    get:
      description: Returns a list of TV shows based on the provided network ID in
        a JSON object.
      parameters:
      - in: path
        name: networkId
        required: true
        schema:
          example: '1'
          type: string
      - in: query
        name: page
        schema:
          default: 1
          example: 1
          type: number
      - in: query
        name: language
        schema:
          example: en
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  network:
                    $ref: '#/components/schemas/Network'
                  page:
                    example: 1
                    type: number
                  results:
                    items:
                      $ref: '#/components/schemas/TvResult'
                    type: array
                  totalPages:
                    example: 20
                    type: number
                  totalResults:
                    example: 200
                    type: number
                type: object
          description: Results
      summary: Discover TV shows by network
      tags:
      - search
  /discover/tv/upcoming:
    get:
      description: Returns a list of upcoming TV shows in a JSON object.
      parameters:
      - in: query
        name: page
        schema:
          default: 1
          example: 1
          type: number
      - in: query
        name: language
        schema:
          example: en
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  page:
                    example: 1
                    type: number
                  results:
                    items:
                      $ref: '#/components/schemas/TvResult'
                    type: array
                  totalPages:
                    example: 20
                    type: number
                  totalResults:
                    example: 200
                    type: number
                type: object
          description: Results
      summary: Discover Upcoming TV shows
      tags:
      - search
  /discover/watchlist:
    get:
      parameters:
      - in: query
        name: page
        schema:
          default: 1
          example: 1
          type: number
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  page:
                    type: number
                  results:
                    items:
                      properties:
                        ratingKey:
                          type: string
                        title:
                          type: string
                        tmdbId:
                          example: 1
                          type: number
                        type:
                          type: string
                      type: object
                    type: array
                  totalPages:
                    type: number
                  totalResults:
                    type: number
                type: object
          description: Watchlist data returned
      summary: Get the Plex watchlist.
      tags:
      - search
  /genres/movie:
    get:
      description: Returns a list of genres in a JSON array.
      parameters:
      - in: query
        name: language
        schema:
          example: en
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  properties:
                    id:
                      example: 10751
                      type: number
                    name:
                      example: Family
                      type: string
                  type: object
                type: array
          description: Results
      summary: Get list of official TMDB movie genres
      tags:
      - tmdb
  /genres/tv:
    get:
      description: Returns a list of genres in a JSON array.
      parameters:
      - in: query
        name: language
        schema:
          example: en
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  properties:
                    id:
                      example: 18
                      type: number
                    name:
                      example: Drama
                      type: string
                  type: object
                type: array
          description: Results
      summary: Get list of official TMDB movie genres
      tags:
      - tmdb
  /issue:
    get:
      description: 'Returns a list of issues in JSON format.

        '
      parameters:
      - in: query
        name: take
        schema:
          example: 20
          nullable: true
          type: number
      - in: query
        name: skip
        schema:
          example: 0
          nullable: true
          type: number
      - in: query
        name: sort
        schema:
          default: added
          enum:
          - added
          - modified
          type: string
      - in: query
        name: filter
        schema:
          default: open
          enum:
          - all
          - open
          - resolved
          type: string
      - in: query
        name: requestedBy
        schema:
          example: 1
          nullable: true
          type: number
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  pageInfo:
                    $ref: '#/components/schemas/PageInfo'
                  results:
                    items:
                      $ref: '#/components/schemas/Issue'
                    type: array
                type: object
          description: Issues returned
      summary: Get all issues
      tags:
      - issue
    post:
      description: 'Creates a new issue

        '
      requestBody:
        content:
          application/json:
            schema:
              properties:
                issueType:
                  type: number
                mediaId:
                  type: number
                message:
                  type: string
              type: object
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issue'
          description: Succesfully created the issue
      summary: Create new issue
      tags:
      - issue
  /issue/count:
    get:
      description: 'Returns the number of open and closed issues, as well as the number
        of issues of each type.

        '
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  audio:
                    type: number
                  closed:
                    type: number
                  open:
                    type: number
                  others:
                    type: number
                  subtitles:
                    type: number
                  total:
                    type: number
                  video:
                    type: number
                type: object
          description: Issue counts returned
      summary: Gets issue counts
      tags:
      - issue
  /issue/{issueId}:
    delete:
      description: Removes an issue. If the user has the `MANAGE_ISSUES` permission,
        any issue can be removed. Otherwise, only a users own issues can be removed.
      parameters:
      - description: Issue ID
        example: '1'
        in: path
        name: issueId
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Succesfully removed issue
      summary: Delete issue
      tags:
      - issue
    get:
      description: 'Returns a single issue in JSON format.

        '
      parameters:
      - in: path
        name: issueId
        required: true
        schema:
          example: 1
          type: number
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issue'
          description: Issues returned
      summary: Get issue
      tags:
      - issue
  /issue/{issueId}/comment:
    post:
      description: 'Creates a comment and returns associated issue in JSON format.

        '
      parameters:
      - in: path
        name: issueId
        required: true
        schema:
          example: 1
          type: number
      requestBody:
        content:
          application/json:
            schema:
              properties:
                message:
                  type: string
              required:
              - message
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issue'
          description: Issue returned with new comment
      summary: Create a comment
      tags:
      - issue
  /issue/{issueId}/{status}:
    post:
      description: 'Updates an issue''s status to approved or declined. Also returns
        the issue in a JSON object.


        Requires the `MANAGE_ISSUES` permission or `ADMIN`.

        '
      parameters:
      - description: Issue ID
        in: path
        name: issueId
        required: true
        schema:
          example: '1'
          type: string
      - description: New status
        in: path
        name: status
        required: true
        schema:
          enum:
          - open
          - resolved
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issue'
          description: Issue status changed
      summary: Update an issue's status
      tags:
      - issue
  /issueComment/{commentId}:
    delete:
      description: 'Deletes an issue comment. Only users with `MANAGE_ISSUES` or the
        user who created the comment can perform this action.

        '
      parameters:
      - description: Issue Comment ID
        example: '1'
        in: path
        name: commentId
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Succesfully removed issue comment
      summary: Delete issue comment
      tags:
      - issue
    get:
      description: 'Returns a single issue comment in JSON format.

        '
      parameters:
      - in: path
        name: commentId
        required: true
        schema:
          example: 1
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueComment'
          description: Comment returned
      summary: Get issue comment
      tags:
      - issue
    put:
      description: 'Updates and returns a single issue comment in JSON format.

        '
      parameters:
      - in: path
        name: commentId
        required: true
        schema:
          example: 1
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                message:
                  type: string
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueComment'
          description: Comment updated
      summary: Update issue comment
      tags:
      - issue
  /keyword/{keywordId}:
    get:
      description: 'Returns a single keyword in JSON format.

        '
      parameters:
      - in: path
        name: keywordId
        required: true
        schema:
          example: 1
          type: number
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Keyword'
          description: Keyword returned
      summary: Get keyword
      tags:
      - other
  /languages:
    get:
      description: Returns a list of languages in a JSON object.
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  properties:
                    english_name:
                      example: English
                      type: string
                    iso_639_1:
                      example: en
                      type: string
                    name:
                      example: English
                      type: string
                  type: object
                type: array
          description: Results
      summary: Languages supported by TMDB
      tags:
      - tmdb
  /media:
    get:
      description: Returns all media (can be filtered and limited) in a JSON object.
      parameters:
      - in: query
        name: take
        schema:
          example: 20
          nullable: true
          type: number
      - in: query
        name: skip
        schema:
          example: 0
          nullable: true
          type: number
      - in: query
        name: filter
        schema:
          enum:
          - all
          - available
          - partial
          - allavailable
          - processing
          - pending
          nullable: true
          type: string
      - in: query
        name: sort
        schema:
          default: added
          enum:
          - added
          - modified
          - mediaAdded
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  pageInfo:
                    $ref: '#/components/schemas/PageInfo'
                  results:
                    items:
                      $ref: '#/components/schemas/MediaInfo'
                    type: array
                type: object
          description: Returned media
      summary: Get media
      tags:
      - media
  /media/{mediaId}:
    delete:
      description: Removes a media item. The `MANAGE_REQUESTS` permission is required
        to perform this action.
      parameters:
      - description: Media ID
        example: '1'
        in: path
        name: mediaId
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Succesfully removed media item
      summary: Delete media item
      tags:
      - media
  /media/{mediaId}/watch_data:
    get:
      description: 'Returns play count, play duration, and users who have watched
        the media.


        Requires the `ADMIN` permission.

        '
      parameters:
      - description: Media ID
        example: '1'
        in: path
        name: mediaId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      playCount:
                        type: number
                      playCount30Days:
                        type: number
                      playCount7Days:
                        type: number
                      users:
                        items:
                          $ref: '#/components/schemas/User'
                        type: array
                    type: object
                  data4k:
                    properties:
                      playCount:
                        type: number
                      playCount30Days:
                        type: number
                      playCount7Days:
                        type: number
                      users:
                        items:
                          $ref: '#/components/schemas/User'
                        type: array
                    type: object
                type: object
          description: Users
      summary: Get watch data
      tags:
      - media
  /media/{mediaId}/{status}:
    post:
      description: Updates a media item's status and returns the media in JSON format
      parameters:
      - description: Media ID
        example: '1'
        in: path
        name: mediaId
        required: true
        schema:
          type: string
      - description: New status
        example: available
        in: path
        name: status
        required: true
        schema:
          enum:
          - available
          - partial
          - processing
          - pending
          - unknown
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                is4k:
                  example: false
                  type: boolean
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaInfo'
          description: Returned media
      summary: Update media status
      tags:
      - media
  /movie/{movieId}:
    get:
      description: Returns full movie details in a JSON object.
      parameters:
      - in: path
        name: movieId
        required: true
        schema:
          example: 337401
          type: number
      - in: query
        name: language
        schema:
          example: en
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieDetails'
          description: Movie details
      summary: Get movie details
      tags:
      - movies
  /movie/{movieId}/ratings:
    get:
      description: Returns ratings based on the provided movieId in a JSON object.
      parameters:
      - in: path
        name: movieId
        required: true
        schema:
          example: 337401
          type: number
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  audienceRating:
                    enum:
                    - Spilled
                    - Upright
                    type: string
                  audienceScore:
                    example: 65
                    type: number
                  criticsRating:
                    enum:
                    - Rotten
                    - Fresh
                    - Certified Fresh
                    type: string
                  criticsScore:
                    example: 85
                    type: number
                  title:
                    example: Mulan
                    type: string
                  url:
                    example: http://www.rottentomatoes.com/m/mulan_2020/
                    type: string
                  year:
                    example: 2020
                    type: number
                type: object
          description: Ratings returned
      summary: Get movie ratings
      tags:
      - movies
  /movie/{movieId}/ratingscombined:
    get:
      description: Returns ratings from RottenTomatoes and IMDB based on the provided
        movieId in a JSON object.
      parameters:
      - in: path
        name: movieId
        required: true
        schema:
          example: 337401
          type: number
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  imdb:
                    properties:
                      criticsScore:
                        example: 6.5
                        type: number
                      title:
                        example: I am Legend
                        type: string
                      url:
                        example: https://www.imdb.com/title/tt0480249
                        type: string
                    type: object
                  rt:
                    properties:
                      audienceRating:
                        enum:
                        - Spilled
                        - Upright
                        type: string
                      audienceScore:
                        example: 65
                        type: number
                      criticsRating:
                        enum:
                        - Rotten
                        - Fresh
                        - Certified Fresh
                        type: string
                      criticsScore:
                        example: 85
                        type: number
                      title:
                        example: Mulan
                        type: string
                      url:
                        example: http://www.rottentomatoes.com/m/mulan_2020/
                        type: string
                      year:
                        example: 2020
                        type: number
                    type: object
                type: object
          description: Ratings returned
      summary: Get RT and IMDB movie ratings combined
      tags:
      - movies
  /movie/{movieId}/recommendations:
    get:
      description: Returns list of recommended movies based on provided movie ID in
        a JSON object.
      parameters:
      - in: path
        name: movieId
        required: true
        schema:
          example: 337401
          type: number
      - in: query
        name: page
        schema:
          default: 1
          example: 1
          type: number
      - in: query
        name: language
        schema:
          example: en
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  page:
                    example: 1
                    type: number
                  results:
                    items:
                      $ref: '#/components/schemas/MovieResult'
                    type: array
                  totalPages:
                    example: 20
                    type: number
                  totalResults:
                    example: 200
                    type: number
                type: object
          description: List of movies
      summary: Get recommended movies
      tags:
      - movies
  /movie/{movieId}/similar:
    get:
      description: Returns list of similar movies based on the provided movieId in
        a JSON object.
      parameters:
      - in: path
        name: movieId
        required: true
        schema:
          example: 337401
          type: number
      - in: query
        name: page
        schema:
          default: 1
          example: 1
          type: number
      - in: query
        name: language
        schema:
          example: en
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  page:
                    example: 1
                    type: number
                  results:
                    items:
                      $ref: '#/components/schemas/MovieResult'
                    type: array
                  totalPages:
                    example: 20
                    type: number
                  totalResults:
                    example: 200
                    type: number
                type: object
          description: List of movies
      summary: Get similar movies
      tags:
      - movies
  /network/{networkId}:
    get:
      description: Returns TV network details in a JSON object.
      parameters:
      - in: path
        name: networkId
        required: true
        schema:
          example: 1
          type: number
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductionCompany'
          description: TV network details
      summary: Get TV network details
      tags:
      - tmdb
  /person/{personId}:
    get:
      description: Returns person details based on provided personId in a JSON object.
      parameters:
      - in: path
        name: personId
        required: true
        schema:
          example: 287
          type: number
      - in: query
        name: language
        schema:
          example: en
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonDetails'
          description: Returned person
      summary: Get person details
      tags:
      - person
  /person/{personId}/combined_credits:
    get:
      description: Returns the person's combined credits based on the provided personId
        in a JSON object.
      parameters:
      - in: path
        name: personId
        required: true
        schema:
          example: 287
          type: number
      - in: query
        name: language
        schema:
          example: en
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  cast:
                    items:
                      $ref: '#/components/schemas/CreditCast'
                    type: array
                  crew:
                    items:
                      $ref: '#/components/schemas/CreditCrew'
                    type: array
                  id:
                    type: number
                type: object
          description: Returned combined credits
      summary: Get combined credits
      tags:
      - person
  /regions:
    get:
      description: Returns a list of regions in a JSON object.
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  properties:
                    english_name:
                      example: United States of America
                      type: string
                    iso_3166_1:
                      example: US
                      type: string
                  type: object
                type: array
          description: Results
      summary: Regions supported by TMDB
      tags:
      - tmdb
  /request:
    get:
      description: 'Returns all requests if the user has the `ADMIN` or `MANAGE_REQUESTS`
        permissions. Otherwise, only the logged-in user''s requests are returned.


        If the `requestedBy` parameter is specified, only requests from that particular
        user ID will be returned.

        '
      parameters:
      - in: query
        name: take
        schema:
          example: 20
          nullable: true
          type: number
      - in: query
        name: skip
        schema:
          example: 0
          nullable: true
          type: number
      - in: query
        name: filter
        schema:
          enum:
          - all
          - approved
          - available
          - pending
          - processing
          - unavailable
          - failed
          nullable: true
          type: string
      - in: query
        name: sort
        schema:
          default: added
          enum:
          - added
          - modified
          type: string
      - in: query
        name: requestedBy
        schema:
          example: 1
          nullable: true
          type: number
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  pageInfo:
                    $ref: '#/components/schemas/PageInfo'
                  results:
                    items:
                      $ref: '#/components/schemas/MediaRequest'
                    type: array
                type: object
          description: Requests returned
      summary: Get all requests
      tags:
      - request
    post:
      description: 'Creates a new request with the provided media ID and type. The
        `REQUEST` permission is required.


        If the user has the `ADMIN` or `AUTO_APPROVE` permissions, their request will
        be auomatically approved.

        '
      requestBody:
        content:
          application/json:
            schema:
              properties:
                is4k:
                  example: false
                  type: boolean
                languageProfileId:
                  type: number
                mediaId:
                  example: 123
                  type: number
                mediaType:
                  enum:
                  - movie
                  - tv
                  example: movie
                  type: string
                profileId:
                  type: number
                rootFolder:
                  type: string
                seasons:
                  oneOf:
                  - items:
                      minimum: 1
                      type: number
                    type: array
                  - enum:
                    - all
                    type: string
                serverId:
                  type: number
                tvdbId:
                  example: 123
                  type: number
                userId:
                  nullable: true
                  type: number
              required:
              - mediaType
              - mediaId
              type: object
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaRequest'
          description: Succesfully created the request
      summary: Create new request
      tags:
      - request
  /request/count:
    get:
      description: 'Returns the number of pending and approved requests.

        '
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  approved:
                    type: number
                  available:
                    type: number
                  declined:
                    type: number
                  movie:
                    type: number
                  pending:
                    type: number
                  processing:
                    type: number
                  total:
                    type: number
                  tv:
                    type: number
                type: object
          description: Request counts returned
      summary: Gets request counts
      tags:
      - request
  /request/{requestId}:
    delete:
      description: Removes a request. If the user has the `MANAGE_REQUESTS` permission,
        any request can be removed. Otherwise, only pending requests can be removed.
      parameters:
      - description: Request ID
        example: '1'
        in: path
        name: requestId
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Succesfully removed request
      summary: Delete request
      tags:
      - request
    get:
      description: Returns a specific MediaRequest in a JSON object.
      parameters:
      - description: Request ID
        example: '1'
        in: path
        name: requestId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaRequest'
          description: Succesfully returns request
      summary: Get MediaRequest
      tags:
      - request
    put:
      description: Updates a specific media request and returns the request in a JSON
        object. Requires the `MANAGE_REQUESTS` permission.
      parameters:
      - description: Request ID
        example: '1'
        in: path
        name: requestId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                is4k:
                  example: false
                  type: boolean
                languageProfileId:
                  type: number
                mediaType:
                  enum:
                  - movie
                  - tv
                  type: string
                profileId:
                  type: number
                rootFolder:
                  type: string
                seasons:
                  items:
                    minimum: 1
                    type: number
                  type: array
                serverId:
                  type: number
                userId:
                  nullable: true
                  type: number
              required:
              - mediaType
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaRequest'
          description: Succesfully updated request
      summary: Update MediaRequest
      tags:
      - request
  /request/{requestId}/retry:
    post:
      description: 'Retries a request by resending requests to Sonarr or Radarr.


        Requires the `MANAGE_REQUESTS` permission or `ADMIN`.

        '
      parameters:
      - description: Request ID
        in: path
        name: requestId
        required: true
        schema:
          example: '1'
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaRequest'
          description: Retry triggered
      summary: Retry failed request
      tags:
      - request
  /request/{requestId}/{status}:
    post:
      description: 'Updates a request''s status to approved or declined. Also returns
        the request in a JSON object.


        Requires the `MANAGE_REQUESTS` permission or `ADMIN`.

        '
      parameters:
      - description: Request ID
        in: path
        name: requestId
        required: true
        schema:
          example: '1'
          type: string
      - description: New status
        in: path
        name: status
        required: true
        schema:
          enum:
          - approve
          - decline
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaRequest'
          description: Request status changed
      summary: Update a request's status
      tags:
      - request
  /search:
    get:
      description: Returns a list of movies, TV shows, or people a JSON object.
      parameters:
      - in: query
        name: query
        required: true
        schema:
          example: Mulan
          type: string
      - in: query
        name: page
        schema:
          default: 1
          example: 1
          type: number
      - in: query
        name: language
        schema:
          example: en
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  page:
                    example: 1
                    type: number
                  results:
                    items:
                      anyOf:
                      - $ref: '#/components/schemas/MovieResult'
                      - $ref: '#/components/schemas/TvResult'
                      - $ref: '#/components/schemas/PersonResult'
                    type: array
                  totalPages:
                    example: 20
                    type: number
                  totalResults:
                    example: 200
                    type: number
                type: object
          description: Results
      summary: Search for movies, TV shows, or people
      tags:
      - search
  /search/company:
    get:
      description: Returns a list of TMDB companies matching the search query. (Will
        not return origin country)
      parameters:
      - in: query
        name: query
        required: true
        schema:
          example: Disney
          type: string
      - in: query
        name: page
        schema:
          default: 1
          example: 1
          type: number
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  page:
                    example: 1
                    type: number
                  results:
                    items:
                      $ref: '#/components/schemas/Company'
                    type: array
                  totalPages:
                    example: 20
                    type: number
                  totalResults:
                    example: 200
                    type: number
                type: object
          description: Results
      summary: Search for companies
      tags:
      - search
  /search/keyword:
    get:
      description: Returns a list of TMDB keywords matching the search query
      parameters:
      - in: query
        name: query
        required: true
        schema:
          example: christmas
          type: string
      - in: query
        name: page
        schema:
          default: 1
          example: 1
          type: number
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  page:
                    example: 1
                    type: number
                  results:
                    items:
                      $ref: '#/components/schemas/Keyword'
                    type: array
                  totalPages:
                    example: 20
                    type: number
                  totalResults:
                    example: 200
                    type: number
                type: object
          description: Results
      summary: Search for keywords
      tags:
      - search
  /service/radarr:
    get:
      description: Returns a list of Radarr server IDs and names in a JSON object.
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RadarrSettings'
                type: array
          description: Request successful
      summary: Get non-sensitive Radarr server list
      tags:
      - service
  /service/radarr/{radarrId}:
    get:
      description: Returns a Radarr server's quality profile and root folder details
        in a JSON object.
      parameters:
      - in: path
        name: radarrId
        required: true
        schema:
          example: 0
          type: number
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  profiles:
                    $ref: '#/components/schemas/ServiceProfile'
                  server:
                    $ref: '#/components/schemas/RadarrSettings'
                type: object
          description: Request successful
      summary: Get Radarr server quality profiles and root folders
      tags:
      - service
  /service/sonarr:
    get:
      description: Returns a list of Sonarr server IDs and names in a JSON object.
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/SonarrSettings'
                type: array
          description: Request successful
      summary: Get non-sensitive Sonarr server list
      tags:
      - service
  /service/sonarr/lookup/{tmdbId}:
    get:
      description: Returns a list of series returned by searching for the name in
        Sonarr.
      parameters:
      - in: path
        name: tmdbId
        required: true
        schema:
          example: 0
          type: number
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/SonarrSeries'
                type: array
          description: Request successful
      summary: Get series from Sonarr
      tags:
      - service
  /service/sonarr/{sonarrId}:
    get:
      description: Returns a Sonarr server's quality profile and root folder details
        in a JSON object.
      parameters:
      - in: path
        name: sonarrId
        required: true
        schema:
          example: 0
          type: number
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  profiles:
                    $ref: '#/components/schemas/ServiceProfile'
                  server:
                    $ref: '#/components/schemas/SonarrSettings'
                type: object
          description: Request successful
      summary: Get Sonarr server quality profiles and root folders
      tags:
      - service
  /settings/about:
    get:
      description: Returns current server stats in a JSON object.
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  appDataPath:
                    example: /app/config
                    type: string
                  totalMediaItems:
                    example: 100
                    type: number
                  totalRequests:
                    example: 100
                    type: number
                  tz:
                    example: Asia/Tokyo
                    nullable: true
                    type: string
                  version:
                    example: 1.0.0
                    type: string
                type: object
          description: Returned about settings
      summary: Get server stats
      tags:
      - settings
  /settings/cache:
    get:
      description: Retrieves a list of all active caches and their current stats.
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  apiCaches:
                    items:
                      properties:
                        id:
                          example: cache-id
                          type: string
                        name:
                          example: cache name
                          type: string
                        stats:
                          properties:
                            hits:
                              type: number
                            keys:
                              type: number
                            ksize:
                              type: number
                            misses:
                              type: number
                            vsize:
                              type: number
                          type: object
                      type: object
                    type: array
                  imageCache:
                    properties:
                      tmdb:
                        properties:
                          imageCount:
                            example: 123
                            type: number
                          size:
                            example: 123456
                            type: number
                        type: object
                    type: object
                type: object
          description: Caches returned
      summary: Get a list of active caches
      tags:
      - settings
  /settings/cache/{cacheId}/flush:
    post:
      description: Flushes all data from the cache ID provided
      parameters:
      - in: path
        name: cacheId
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Flushed cache
      summary: Flush a specific cache
      tags:
      - settings
  /settings/discover:
    get:
      description: Returns all discovery sliders. Built-in and custom made.
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/DiscoverSlider'
                type: array
          description: Returned all discovery sliders
      summary: Get all discover sliders
      tags:
      - settings
    post:
      description: 'Batch update all sliders at once. Should also be used for creation.
        Will only update sliders provided

        and will not delete any sliders not present in the request. If a slider is
        missing a required field,

        it will be ignored. Requires the `ADMIN` permission.

        '
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/DiscoverSlider'
              type: array
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/DiscoverSlider'
                type: array
          description: Returned all newly updated discovery sliders
      summary: Batch update all sliders.
      tags:
      - settings
  /settings/discover/add:
    post:
      description: 'Add a single slider and return the newly created slider. Requires
        the `ADMIN` permission.

        '
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  example: '1'
                  type: string
                title:
                  example: New Slider
                  type: string
                type:
                  example: 1
                  type: number
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscoverSlider'
          description: Returns newly added discovery slider
      summary: Add a new slider
      tags:
      - settings
  /settings/discover/reset:
    get:
      description: Resets all discovery sliders to the default values. Requires the
        `ADMIN` permission.
      responses:
        '204':
          description: All sliders reset to defaults
      summary: Reset all discover sliders
      tags:
      - settings
  /settings/discover/{sliderId}:
    delete:
      description: Deletes the slider with the provided sliderId. Requires the `ADMIN`
        permission.
      parameters:
      - in: path
        name: sliderId
        required: true
        schema:
          type: number
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscoverSlider'
          description: Slider successfully deleted
      summary: Delete slider by ID
      tags:
      - settings
    put:
      description: 'Updates a single slider and return the newly updated slider. Requires
        the `ADMIN` permission.

        '
      parameters:
      - description: The ID of the slider
        in: path
        name: sliderId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  example: '1'
                  type: string
                title:
                  example: Slider Title
                  type: string
                type:
                  example: 1
                  type: number
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscoverSlider'
          description: Returns newly added discovery slider
      summary: Update a single slider
      tags:
      - settings
  /settings/initialize:
    post:
      description: Sets the app as initialized, allowing the user to navigate to pages
        other than the setup page.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicSettings'
          description: Public settings returned
      summary: Initialize application
      tags:
      - settings
  /settings/jobs:
    get:
      description: Returns list of all scheduled jobs and details about their next
        execution time in a JSON array.
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Job'
                type: array
          description: Scheduled jobs returned
      summary: Get scheduled jobs
      tags:
      - settings
  /settings/jobs/{jobId}/cancel:
    post:
      description: Cancels a specific job. Will return the new job status in JSON
        format.
      parameters:
      - in: path
        name: jobId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
          description: Canceled job returned
      summary: Cancel a specific job
      tags:
      - settings
  /settings/jobs/{jobId}/run:
    post:
      description: Invokes a specific job to run. Will return the new job status in
        JSON format.
      parameters:
      - in: path
        name: jobId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
          description: Invoked job returned
      summary: Invoke a specific job
      tags:
      - settings
  /settings/jobs/{jobId}/schedule:
    post:
      description: Re-registers the job with the schedule specified. Will return the
        job in JSON format.
      parameters:
      - in: path
        name: jobId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                schedule:
                  example: 0 */5 * * * *
                  type: string
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
          description: Rescheduled job
      summary: Modify job schedule
      tags:
      - settings
  /settings/logs:
    get:
      description: Returns list of all log items and details
      parameters:
      - in: query
        name: take
        schema:
          example: 25
          nullable: true
          type: number
      - in: query
        name: skip
        schema:
          example: 0
          nullable: true
          type: number
      - in: query
        name: filter
        schema:
          default: debug
          enum:
          - debug
          - info
          - warn
          - error
          nullable: true
          type: string
      - in: query
        name: search
        schema:
          example: plex
          nullable: true
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  properties:
                    label:
                      example: server
                      type: string
                    level:
                      example: info
                      type: string
                    message:
                      example: Server ready on port 5055
                      type: string
                    timestamp:
                      example: '2020-12-15T16:20:00.069Z'
                      type: string
                  type: object
                type: array
          description: Server log returned
      summary: Returns logs
      tags:
      - settings
  /settings/main:
    get:
      description: Retrieves all main settings in a JSON object.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MainSettings'
          description: OK
      summary: Get main settings
      tags:
      - settings
    post:
      description: Updates main settings with the provided values.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MainSettings'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MainSettings'
          description: Values were sucessfully updated
      summary: Update main settings
      tags:
      - settings
  /settings/main/regenerate:
    post:
      description: Returns main settings in a JSON object, using the new API key.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MainSettings'
          description: OK
      summary: Get main settings with newly-generated API key
      tags:
      - settings
  /settings/notifications/discord:
    get:
      description: Returns current Discord notification settings in a JSON object.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscordSettings'
          description: Returned Discord settings
      summary: Get Discord notification settings
      tags:
      - settings
    post:
      description: Updates Discord notification settings with the provided values.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiscordSettings'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscordSettings'
          description: Values were sucessfully updated
      summary: Update Discord notification settings
      tags:
      - settings
  /settings/notifications/discord/test:
    post:
      description: Sends a test notification to the Discord agent.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiscordSettings'
        required: true
      responses:
        '204':
          description: Test notification attempted
      summary: Test Discord settings
      tags:
      - settings
  /settings/notifications/email:
    get:
      description: Returns current email notification settings in a JSON object.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationEmailSettings'
          description: Returned email settings
      summary: Get email notification settings
      tags:
      - settings
    post:
      description: Updates email notification settings with provided values
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationEmailSettings'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationEmailSettings'
          description: Values were sucessfully updated
      summary: Update email notification settings
      tags:
      - settings
  /settings/notifications/email/test:
    post:
      description: Sends a test notification to the email agent.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationEmailSettings'
        required: true
      responses:
        '204':
          description: Test notification attempted
      summary: Test email settings
      tags:
      - settings
  /settings/notifications/gotify:
    get:
      description: Returns current Gotify notification settings in a JSON object.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GotifySettings'
          description: Returned Gotify settings
      summary: Get Gotify notification settings
      tags:
      - settings
    post:
      description: Update Gotify notification settings with the provided values.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GotifySettings'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GotifySettings'
          description: Values were sucessfully updated
      summary: Update Gotify notification settings
      tags:
      - settings
  /settings/notifications/gotify/test:
    post:
      description: Sends a test notification to the Gotify agent.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GotifySettings'
        required: true
      responses:
        '204':
          description: Test notification attempted
      summary: Test Gotify settings
      tags:
      - settings
  /settings/notifications/lunasea:
    get:
      description: Returns current LunaSea notification settings in a JSON object.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LunaSeaSettings'
          description: Returned LunaSea settings
      summary: Get LunaSea notification settings
      tags:
      - settings
    post:
      description: Updates LunaSea notification settings with the provided values.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LunaSeaSettings'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LunaSeaSettings'
          description: Values were sucessfully updated
      summary: Update LunaSea notification settings
      tags:
      - settings
  /settings/notifications/lunasea/test:
    post:
      description: Sends a test notification to the LunaSea agent.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LunaSeaSettings'
        required: true
      responses:
        '204':
          description: Test notification attempted
      summary: Test LunaSea settings
      tags:
      - settings
  /settings/notifications/pushbullet:
    get:
      description: Returns current Pushbullet notification settings in a JSON object.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PushbulletSettings'
          description: Returned Pushbullet settings
      summary: Get Pushbullet notification settings
      tags:
      - settings
    post:
      description: Update Pushbullet notification settings with the provided values.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PushbulletSettings'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PushbulletSettings'
          description: Values were sucessfully updated
      summary: Update Pushbullet notification settings
      tags:
      - settings
  /settings/notifications/pushbullet/test:
    post:
      description: Sends a test notification to the Pushbullet agent.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PushbulletSettings'
        required: true
      responses:
        '204':
          description: Test notification attempted
      summary: Test Pushbullet settings
      tags:
      - settings
  /settings/notifications/pushover:
    get:
      description: Returns current Pushover notification settings in a JSON object.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PushoverSettings'
          description: Returned Pushover settings
      summary: Get Pushover notification settings
      tags:
      - settings
    post:
      description: Update Pushover notification settings with the provided values.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PushoverSettings'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PushoverSettings'
          description: Values were sucessfully updated
      summary: Update Pushover notification settings
      tags:
      - settings
  /settings/notifications/pushover/sounds:
    get:
      description: Returns valid Pushover sound options in a JSON array.
      parameters:
      - in: query
        name: token
        required: true
        schema:
          nullable: false
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  properties:
                    description:
                      type: string
                    name:
                      type: string
                  type: object
                type: array
          description: Returned Pushover settings
      summary: Get Pushover sounds
      tags:
      - settings
  /settings/notifications/pushover/test:
    post:
      description: Sends a test notification to the Pushover agent.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PushoverSettings'
        required: true
      responses:
        '204':
          description: Test notification attempted
      summary: Test Pushover settings
      tags:
      - settings
  /settings/notifications/slack:
    get:
      description: Returns current Slack notification settings in a JSON object.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SlackSettings'
          description: Returned slack settings
      summary: Get Slack notification settings
      tags:
      - settings
    post:
      description: Updates Slack notification settings with the provided values.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SlackSettings'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SlackSettings'
          description: Values were sucessfully updated
      summary: Update Slack notification settings
      tags:
      - settings
  /settings/notifications/slack/test:
    post:
      description: Sends a test notification to the Slack agent.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SlackSettings'
        required: true
      responses:
        '204':
          description: Test notification attempted
      summary: Test Slack settings
      tags:
      - settings
  /settings/notifications/telegram:
    get:
      description: Returns current Telegram notification settings in a JSON object.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelegramSettings'
          description: Returned Telegram settings
      summary: Get Telegram notification settings
      tags:
      - settings
    post:
      description: Update Telegram notification settings with the provided values.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelegramSettings'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelegramSettings'
          description: Values were sucessfully updated
      summary: Update Telegram notification settings
      tags:
      - settings
  /settings/notifications/telegram/test:
    post:
      description: Sends a test notification to the Telegram agent.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelegramSettings'
        required: true
      responses:
        '204':
          description: Test notification attempted
      summary: Test Telegram settings
      tags:
      - settings
  /settings/notifications/webhook:
    get:
      description: Returns current webhook notification settings in a JSON object.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookSettings'
          description: Returned webhook settings
      summary: Get webhook notification settings
      tags:
      - settings
    post:
      description: Updates webhook notification settings with the provided values.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookSettings'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookSettings'
          description: Values were sucessfully updated
      summary: Update webhook notification settings
      tags:
      - settings
  /settings/notifications/webhook/test:
    post:
      description: Sends a test notification to the webhook agent.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookSettings'
        required: true
      responses:
        '204':
          description: Test notification attempted
      summary: Test webhook settings
      tags:
      - settings
  /settings/notifications/webpush:
    get:
      description: Returns current Web Push notification settings in a JSON object.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebPushSettings'
          description: Returned web push settings
      summary: Get Web Push notification settings
      tags:
      - settings
    post:
      description: Updates Web Push notification settings with the provided values.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebPushSettings'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebPushSettings'
          description: Values were sucessfully updated
      summary: Update Web Push notification settings
      tags:
      - settings
  /settings/notifications/webpush/test:
    post:
      description: Sends a test notification to the Web Push agent.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebPushSettings'
        required: true
      responses:
        '204':
          description: Test notification attempted
      summary: Test Web Push settings
      tags:
      - settings
  /settings/plex:
    get:
      description: Retrieves current Plex settings.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlexSettings'
          description: OK
      summary: Get Plex settings
      tags:
      - settings
    post:
      description: Updates Plex settings with the provided values.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlexSettings'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlexSettings'
          description: Values were successfully updated
      summary: Update Plex settings
      tags:
      - settings
  /settings/plex/devices/servers:
    get:
      description: Returns a list of available Plex servers and their connectivity
        state
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PlexDevice'
                type: array
          description: OK
      summary: Gets the user's available Plex servers
      tags:
      - settings
  /settings/plex/library:
    get:
      description: Returns a list of Plex libraries in a JSON array.
      parameters:
      - description: Syncs the current libraries with the current Plex server
        in: query
        name: sync
        schema:
          nullable: true
          type: string
      - allowReserved: true
        description: Comma separated list of libraries to enable. Any libraries not
          passed will be disabled!
        explode: false
        in: query
        name: enable
        schema:
          nullable: true
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PlexLibrary'
                type: array
          description: Plex libraries returned
      summary: Get Plex libraries
      tags:
      - settings
  /settings/plex/sync:
    get:
      description: Returns scan progress in a JSON array.
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  currentLibrary:
                    $ref: '#/components/schemas/PlexLibrary'
                  libraries:
                    items:
                      $ref: '#/components/schemas/PlexLibrary'
                    type: array
                  progress:
                    example: 0
                    type: number
                  running:
                    example: false
                    type: boolean
                  total:
                    example: 100
                    type: number
                type: object
          description: Status of Plex scan
      summary: Get status of full Plex library scan
      tags:
      - settings
    post:
      description: Runs a full Plex library scan and returns the progress in a JSON
        array.
      requestBody:
        content:
          application/json:
            schema:
              properties:
                cancel:
                  example: false
                  type: boolean
                start:
                  example: false
                  type: boolean
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  currentLibrary:
                    $ref: '#/components/schemas/PlexLibrary'
                  libraries:
                    items:
                      $ref: '#/components/schemas/PlexLibrary'
                    type: array
                  progress:
                    example: 0
                    type: number
                  running:
                    example: false
                    type: boolean
                  total:
                    example: 100
                    type: number
                type: object
          description: Status of Plex scan
      summary: Start full Plex library scan
      tags:
      - settings
  /settings/plex/users:
    get:
      description: 'Returns a list of Plex users in a JSON array.


        Requires the `MANAGE_USERS` permission.

        '
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  properties:
                    email:
                      type: string
                    id:
                      type: string
                    thumb:
                      type: string
                    title:
                      type: string
                    username:
                      type: string
                  type: object
                type: array
          description: Plex users
      summary: Get Plex users
      tags:
      - settings
      - users
  /settings/public:
    get:
      description: Returns settings that are not protected or sensitive. Mainly used
        to determine if the application has been configured for the first time.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicSettings'
          description: Public settings returned
      security: []
      summary: Get public settings
      tags:
      - settings
  /settings/radarr:
    get:
      description: Returns all Radarr settings in a JSON array.
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RadarrSettings'
                type: array
          description: Values were returned
      summary: Get Radarr settings
      tags:
      - settings
    post:
      description: Creates a new Radarr instance from the request body.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RadarrSettings'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RadarrSettings'
          description: New Radarr instance created
      summary: Create Radarr instance
      tags:
      - settings
  /settings/radarr/test:
    post:
      description: Tests if the Radarr configuration is valid. Returns profiles and
        root folders on success.
      requestBody:
        content:
          application/json:
            schema:
              properties:
                apiKey:
                  example: yourapikey
                  type: string
                baseUrl:
                  type: string
                hostname:
                  example: 127.0.0.1
                  type: string
                port:
                  example: 7878
                  type: number
                useSsl:
                  example: false
                  type: boolean
              required:
              - hostname
              - port
              - apiKey
              - useSsl
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  profiles:
                    items:
                      $ref: '#/components/schemas/ServiceProfile'
                    type: array
                type: object
          description: Succesfully connected to Radarr instance
      summary: Test Radarr configuration
      tags:
      - settings
  /settings/radarr/{radarrId}:
    delete:
      description: Deletes an existing Radarr instance based on the radarrId parameter.
      parameters:
      - description: Radarr instance ID
        in: path
        name: radarrId
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RadarrSettings'
          description: Radarr instance updated
      summary: Delete Radarr instance
      tags:
      - settings
    put:
      description: Updates an existing Radarr instance with the provided values.
      parameters:
      - description: Radarr instance ID
        in: path
        name: radarrId
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RadarrSettings'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RadarrSettings'
          description: Radarr instance updated
      summary: Update Radarr instance
      tags:
      - settings
  /settings/radarr/{radarrId}/profiles:
    get:
      description: Returns a list of profiles available on the Radarr server instance
        in a JSON array.
      parameters:
      - description: Radarr instance ID
        in: path
        name: radarrId
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ServiceProfile'
                type: array
          description: Returned list of profiles
      summary: Get available Radarr profiles
      tags:
      - settings
  /settings/sonarr:
    get:
      description: Returns all Sonarr settings in a JSON array.
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/SonarrSettings'
                type: array
          description: Values were returned
      summary: Get Sonarr settings
      tags:
      - settings
    post:
      description: Creates a new Sonarr instance from the request body.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SonarrSettings'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SonarrSettings'
          description: New Sonarr instance created
      summary: Create Sonarr instance
      tags:
      - settings
  /settings/sonarr/test:
    post:
      description: Tests if the Sonarr configuration is valid. Returns profiles and
        root folders on success.
      requestBody:
        content:
          application/json:
            schema:
              properties:
                apiKey:
                  example: yourapikey
                  type: string
                baseUrl:
                  type: string
                hostname:
                  example: 127.0.0.1
                  type: string
                port:
                  example: 8989
                  type: number
                useSsl:
                  example: false
                  type: boolean
              required:
              - hostname
              - port
              - apiKey
              - useSsl
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  profiles:
                    items:
                      $ref: '#/components/schemas/ServiceProfile'
                    type: array
                type: object
          description: Succesfully connected to Sonarr instance
      summary: Test Sonarr configuration
      tags:
      - settings
  /settings/sonarr/{sonarrId}:
    delete:
      description: Deletes an existing Sonarr instance based on the sonarrId parameter.
      parameters:
      - description: Sonarr instance ID
        in: path
        name: sonarrId
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SonarrSettings'
          description: Sonarr instance updated
      summary: Delete Sonarr instance
      tags:
      - settings
    put:
      description: Updates an existing Sonarr instance with the provided values.
      parameters:
      - description: Sonarr instance ID
        in: path
        name: sonarrId
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SonarrSettings'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SonarrSettings'
          description: Sonarr instance updated
      summary: Update Sonarr instance
      tags:
      - settings
  /settings/tautulli:
    get:
      description: Retrieves current Tautulli settings.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TautulliSettings'
          description: OK
      summary: Get Tautulli settings
      tags:
      - settings
    post:
      description: Updates Tautulli settings with the provided values.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TautulliSettings'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TautulliSettings'
          description: Values were successfully updated
      summary: Update Tautulli settings
      tags:
      - settings
  /status:
    get:
      description: Returns the current Overseerr status in a JSON object.
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  commitTag:
                    type: string
                  commitsBehind:
                    type: number
                  restartRequired:
                    type: boolean
                  updateAvailable:
                    type: boolean
                  version:
                    example: 1.0.0
                    type: string
                type: object
          description: Returned status
      security: []
      summary: Get Overseerr status
      tags:
      - public
  /status/appdata:
    get:
      description: For Docker installs, returns whether or not the volume mount was
        configured properly. Always returns true for non-Docker installs.
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  appData:
                    example: true
                    type: boolean
                  appDataPath:
                    example: /app/config
                    type: string
                type: object
          description: Application data volume status and path
      security: []
      summary: Get application data volume status
      tags:
      - public
  /studio/{studioId}:
    get:
      description: Returns movie studio details in a JSON object.
      parameters:
      - in: path
        name: studioId
        required: true
        schema:
          example: 2
          type: number
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductionCompany'
          description: Movie studio details
      summary: Get movie studio details
      tags:
      - tmdb
  /tv/{tvId}:
    get:
      description: Returns full TV details in a JSON object.
      parameters:
      - in: path
        name: tvId
        required: true
        schema:
          example: 76479
          type: number
      - in: query
        name: language
        schema:
          example: en
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TvDetails'
          description: TV details
      summary: Get TV details
      tags:
      - tv
  /tv/{tvId}/ratings:
    get:
      description: Returns ratings based on provided tvId in a JSON object.
      parameters:
      - in: path
        name: tvId
        required: true
        schema:
          example: 76479
          type: number
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  criticsRating:
                    enum:
                    - Rotten
                    - Fresh
                    type: string
                  criticsScore:
                    example: 85
                    type: number
                  title:
                    example: The Boys
                    type: string
                  url:
                    example: http://www.rottentomatoes.com/m/mulan_2020/
                    type: string
                  year:
                    example: 2019
                    type: number
                type: object
          description: Ratings returned
      summary: Get TV ratings
      tags:
      - tv
  /tv/{tvId}/recommendations:
    get:
      description: Returns list of recommended TV series based on the provided tvId
        in a JSON object.
      parameters:
      - in: path
        name: tvId
        required: true
        schema:
          example: 76479
          type: number
      - in: query
        name: page
        schema:
          default: 1
          example: 1
          type: number
      - in: query
        name: language
        schema:
          example: en
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  page:
                    example: 1
                    type: number
                  results:
                    items:
                      $ref: '#/components/schemas/TvResult'
                    type: array
                  totalPages:
                    example: 20
                    type: number
                  totalResults:
                    example: 200
                    type: number
                type: object
          description: List of TV series
      summary: Get recommended TV series
      tags:
      - tv
  /tv/{tvId}/season/{seasonId}:
    get:
      description: Returns season details with a list of episodes in a JSON object.
      parameters:
      - in: path
        name: tvId
        required: true
        schema:
          example: 76479
          type: number
      - in: path
        name: seasonId
        required: true
        schema:
          example: 1
          type: number
      - in: query
        name: language
        schema:
          example: en
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Season'
          description: TV details
      summary: Get season details and episode list
      tags:
      - tv
  /tv/{tvId}/similar:
    get:
      description: Returns list of similar TV series based on the provided tvId in
        a JSON object.
      parameters:
      - in: path
        name: tvId
        required: true
        schema:
          example: 76479
          type: number
      - in: query
        name: page
        schema:
          default: 1
          example: 1
          type: number
      - in: query
        name: language
        schema:
          example: en
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  page:
                    example: 1
                    type: number
                  results:
                    items:
                      $ref: '#/components/schemas/TvResult'
                    type: array
                  totalPages:
                    example: 20
                    type: number
                  totalResults:
                    example: 200
                    type: number
                type: object
          description: List of TV series
      summary: Get similar TV series
      tags:
      - tv
  /user:
    get:
      description: Returns all users in a JSON object.
      parameters:
      - in: query
        name: take
        schema:
          example: 20
          nullable: true
          type: number
      - in: query
        name: skip
        schema:
          example: 0
          nullable: true
          type: number
      - in: query
        name: sort
        schema:
          default: created
          enum:
          - created
          - updated
          - requests
          - displayname
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  pageInfo:
                    $ref: '#/components/schemas/PageInfo'
                  results:
                    $ref: '#/components/schemas/User'
                    items:
                      $ref: '#/components/schemas/User'
                    type: array
                type: object
          description: A JSON array of all users
      summary: Get all users
      tags:
      - users
    post:
      description: 'Creates a new user. Requires the `MANAGE_USERS` permission.

        '
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  example: hey@itsme.com
                  type: string
                permissions:
                  type: number
                username:
                  type: string
              type: object
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: The created user
      summary: Create new user
      tags:
      - users
    put:
      description: 'Update users with given IDs with provided values in request `body.settings`.
        You cannot update users'' Plex tokens through this request.


        Requires the `MANAGE_USERS` permission.

        '
      requestBody:
        content:
          application/json:
            schema:
              properties:
                ids:
                  items:
                    type: integer
                  type: array
                permissions:
                  type: integer
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: Successfully updated user details
      summary: Update batch of users
      tags:
      - users
  /user/import-from-plex:
    post:
      description: 'Fetches and imports users from the Plex server. If a list of Plex
        IDs is provided in the request body, only the specified users will be imported.
        Otherwise, all users will be imported.


        Requires the `MANAGE_USERS` permission.

        '
      requestBody:
        content:
          application/json:
            schema:
              properties:
                plexIds:
                  items:
                    type: string
                  type: array
              type: object
        required: false
      responses:
        '201':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: A list of the newly created users
      summary: Import all users from Plex
      tags:
      - users
  /user/registerPushSubscription:
    post:
      description: Registers a web push subscription for the logged-in user
      requestBody:
        content:
          application/json:
            schema:
              properties:
                auth:
                  type: string
                endpoint:
                  type: string
                p256dh:
                  type: string
              required:
              - endpoint
              - auth
              - p256dh
              type: object
        required: true
      responses:
        '204':
          description: Successfully registered push subscription
      summary: Register a web push /user/registerPushSubscription
      tags:
      - users
  /user/{userId}:
    delete:
      description: Deletes the user with the provided userId. Requires the `MANAGE_USERS`
        permission.
      parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: number
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: User successfully deleted
      summary: Delete user by ID
      tags:
      - users
    get:
      description: 'Retrieves user details in a JSON object. Requires the `MANAGE_USERS`
        permission.

        '
      parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: number
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Users details in JSON
      summary: Get user by ID
      tags:
      - users
    put:
      description: 'Update a user with the provided values. You cannot update a user''s
        Plex token through this request.


        Requires the `MANAGE_USERS` permission.

        '
      parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: number
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Successfully updated user details
      summary: Update a user by user ID
      tags:
      - users
  /user/{userId}/quota:
    get:
      description: 'Returns quota details for a user in a JSON object. Requires `MANAGE_USERS`
        permission if viewing other users.

        '
      parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: number
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  movie:
                    properties:
                      days:
                        example: 7
                        type: number
                      limit:
                        example: 10
                        type: number
                      remaining:
                        example: 4
                        type: number
                      restricted:
                        example: false
                        type: boolean
                      used:
                        example: 6
                        type: number
                    type: object
                  tv:
                    properties:
                      days:
                        example: 7
                        type: number
                      limit:
                        example: 10
                        type: number
                      remaining:
                        example: 4
                        type: number
                      restricted:
                        example: false
                        type: boolean
                      used:
                        example: 6
                        type: number
                    type: object
                type: object
          description: User quota details in JSON
      summary: Get quotas for a specific user
      tags:
      - users
  /user/{userId}/requests:
    get:
      description: 'Retrieves a user''s requests in a JSON object.

        '
      parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: number
      - in: query
        name: take
        schema:
          example: 20
          nullable: true
          type: number
      - in: query
        name: skip
        schema:
          example: 0
          nullable: true
          type: number
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  pageInfo:
                    $ref: '#/components/schemas/PageInfo'
                  results:
                    items:
                      $ref: '#/components/schemas/MediaRequest'
                    type: array
                type: object
          description: User's requests returned
      summary: Get requests for a specific user
      tags:
      - users
  /user/{userId}/settings/main:
    get:
      description: Returns general settings for a specific user. Requires `MANAGE_USERS`
        permission if viewing other users.
      parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: number
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  username:
                    example: Mr User
                    type: string
                type: object
          description: User general settings returned
      summary: Get general settings for a user
      tags:
      - users
    post:
      description: Updates and returns general settings for a specific user. Requires
        `MANAGE_USERS` permission if editing other users.
      parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: number
      requestBody:
        content:
          application/json:
            schema:
              properties:
                username:
                  nullable: true
                  type: string
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  username:
                    example: Mr User
                    type: string
                type: object
          description: Updated user general settings returned
      summary: Update general settings for a user
      tags:
      - users
  /user/{userId}/settings/notifications:
    get:
      description: Returns notification settings for a specific user. Requires `MANAGE_USERS`
        permission if viewing other users.
      parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: number
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettingsNotifications'
          description: User notification settings returned
      summary: Get notification settings for a user
      tags:
      - users
    post:
      description: Updates and returns notification settings for a specific user.
        Requires `MANAGE_USERS` permission if editing other users.
      parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: number
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSettingsNotifications'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettingsNotifications'
          description: Updated user notification settings returned
      summary: Update notification settings for a user
      tags:
      - users
  /user/{userId}/settings/password:
    get:
      description: Returns important data for the password page to function correctly.
        Requires `MANAGE_USERS` permission if viewing other users.
      parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: number
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  hasPassword:
                    example: true
                    type: boolean
                type: object
          description: User password page information returned
      summary: Get password page informatiom
      tags:
      - users
    post:
      description: Updates a user's password. Requires `MANAGE_USERS` permission if
        editing other users.
      parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: number
      requestBody:
        content:
          application/json:
            schema:
              properties:
                currentPassword:
                  nullable: true
                  type: string
                newPassword:
                  type: string
              required:
              - newPassword
              type: object
        required: true
      responses:
        '204':
          description: User password updated
      summary: Update password for a user
      tags:
      - users
  /user/{userId}/settings/permissions:
    get:
      description: Returns permission settings for a specific user. Requires `MANAGE_USERS`
        permission if viewing other users.
      parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: number
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  permissions:
                    example: 2
                    type: number
                type: object
          description: User permission settings returned
      summary: Get permission settings for a user
      tags:
      - users
    post:
      description: Updates and returns permission settings for a specific user. Requires
        `MANAGE_USERS` permission if editing other users.
      parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: number
      requestBody:
        content:
          application/json:
            schema:
              properties:
                permissions:
                  type: number
              required:
              - permissions
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  permissions:
                    example: 2
                    type: number
                type: object
          description: Updated user general settings returned
      summary: Update permission settings for a user
      tags:
      - users
  /user/{userId}/watch_data:
    get:
      description: 'Returns play count, play duration, and recently watched media.


        Requires the `ADMIN` permission to fetch results for other users.

        '
      parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: number
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  playCount:
                    type: number
                  recentlyWatched:
                    items:
                      $ref: '#/components/schemas/MediaInfo'
                    type: array
                type: object
          description: Users
      summary: Get watch data
      tags:
      - users
  /user/{userId}/watchlist:
    get:
      description: 'Retrieves a user''s Plex Watchlist in a JSON object.

        '
      parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: number
      - in: query
        name: page
        schema:
          default: 1
          example: 1
          type: number
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  page:
                    type: number
                  results:
                    items:
                      properties:
                        ratingKey:
                          type: string
                        title:
                          type: string
                        tmdbId:
                          example: 1
                          type: number
                        type:
                          type: string
                      type: object
                    type: array
                  totalPages:
                    type: number
                  totalResults:
                    type: number
                type: object
          description: Watchlist data returned
      summary: Get the Plex watchlist for a specific user
      tags:
      - users
  /watchproviders/movies:
    get:
      description: 'Returns a list of all available watch providers for movies.

        '
      parameters:
      - in: query
        name: watchRegion
        required: true
        schema:
          example: US
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/WatchProviderDetails'
                type: array
          description: Watch providers for movies returned
      summary: Get watch provider movies
      tags:
      - other
  /watchproviders/regions:
    get:
      description: 'Returns a list of all available watch provider regions.

        '
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/WatchProviderRegion'
                type: array
          description: Watch provider regions returned
      summary: Get watch provider regions
      tags:
      - other
  /watchproviders/tv:
    get:
      description: 'Returns a list of all available watch providers for series.

        '
      parameters:
      - in: query
        name: watchRegion
        required: true
        schema:
          example: US
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/WatchProviderDetails'
                type: array
          description: Watch providers for series returned
      summary: Get watch provider series
      tags:
      - other
security:
- cookieAuth: []
- apiKey: []
servers:
- url: '{server}/api/v1'
  variables:
    server:
      default: http://localhost:5055
tags:
- description: Public API endpoints requiring no authentication.
  name: public
- description: Endpoints related to Overseerr's settings and configuration.
  name: settings
- description: Endpoints related to logging in or out, and the currently authenticated
    user.
  name: auth
- description: Endpoints related to user management.
  name: users
- description: Endpoints related to search and discovery.
  name: search
- description: Endpoints related to request management.
  name: request
- description: Endpoints related to retrieving movies and their details.
  name: movies
- description: Endpoints related to retrieving TV series and their details.
  name: tv
- description: Endpoints related to other TMDB data
  name: other
- description: Endpoints related to retrieving person details.
  name: person
- description: Endpoints related to media management.
  name: media
- description: Endpoints related to retrieving collection details.
  name: collection
- description: Endpoints related to getting service (Radarr/Sonarr) details.
  name: service
